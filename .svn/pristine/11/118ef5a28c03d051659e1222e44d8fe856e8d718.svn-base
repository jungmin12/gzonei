package gzonei.devlopInfo.web;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.sql.SQLException;
import java.util.Collections;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.Assert;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.google.gson.Gson;

import egovframework.com.cmm.EgovBrowserUtil;
import egovframework.com.cmm.service.EgovFileMngService;
import egovframework.com.cmm.service.EgovFileMngUtil;
import egovframework.com.cmm.service.FileVO;
import egovframework.com.cmm.util.EgovBasicLogger;
import egovframework.com.cmm.util.EgovResourceCloseHelper;
import egovframework.com.cop.bbs.service.BoardVO;
import egovframework.rte.fdl.property.EgovPropertyService;
import egovframework.rte.psl.dataaccess.util.EgovMap;
import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import gzonei.cmmn.service.CmmnService;
import gzonei.devlopInfo.service.DevlopInfoService;

/**
* 
* 샘플 Controller
* @author PODO 개발3팀 김승제
* @since 2021.01.26
* @version 1.0
* @see
* ************ 개발 고려사항  ************ 
*
*
*
* <pre>
* << 개정이력(Modification Information) >>
*
*   수정일     	 	수정자          	수정내용
*  -------    --------    ---------------------------
*  2021.01.26      김승제         		최초 생성
*  
*
*  </pre>
*/
@Controller
public class DevlopInfoController {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(DevlopInfoController.class);
	
	/** SampleService */
	@Resource(name = "DevlopInfoService")
	private DevlopInfoService devlopInfoService;
	
    /** EgovPropertyService */
    @Resource(name = "propertiesService")
    private EgovPropertyService propertiesService;
    
    /** CmmnService */
    @Resource(name = "cmmnService")
    private CmmnService cmmnService;
    
    //파일첨부관련 Egov 서비스
    @Resource(name = "EgovFileMngService")
    private EgovFileMngService fileMngService;
    
    @Resource(name = "EgovFileMngUtil")
    private EgovFileMngUtil fileUtil;
    
    @Resource(name = "multipartResolver")
    CommonsMultipartResolver multipartResolver;
	/**
	 * 샘플 조회(코드리스트) 페이지
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException , IOException
	 */
    
    
    
    
    @RequestMapping(value="/devlopInfo/selectList.do")
	public String tcmColctListPage(HttpServletRequest request, HttpServletResponse response, Model model) throws IOException,SQLException{
    	EgovMap searchVO = new EgovMap();
		if(null != request.getParameter("textSearch") && !"".equals(request.getParameter("textSearch"))) {
			searchVO.put("textSearch", request.getParameter("textSearch"));
		}else {
			searchVO.put("textSearch", "");
		}
		
		PaginationInfo paginationInfo = new PaginationInfo();
		BoardVO boardVO = new BoardVO();
		if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
		paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
		paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
		paginationInfo.setPageSize(boardVO.getPageSize());
		
		searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
		searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
		searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());
		
		List<?> resultList = devlopInfoService.selectDevlopInfoList(searchVO);
		int totCnt = devlopInfoService.selectDevlopInfoListTotCnt(searchVO);
		
		paginationInfo.setTotalRecordCount(totCnt);
		
		model.addAttribute("searchVO",searchVO);
		model.addAttribute("resultListTotCnt",totCnt);
		model.addAttribute("resultList",resultList);
		model.addAttribute("paginationInfo", paginationInfo);
    	
    	return "gzonei/devlopInfo/devlopInfoList";
	}
    
    /*//상세보기 화면
  	@RequestMapping(value="/devlopInfo/selectDetail.do")
  	public String tcmColctViewPage(HttpServletRequest request, HttpServletResponse response) throws IOException,SQLException{
  		return "gzonei/devlopInfo/devlopInfoDetail";
  	}*/
    
    
	@RequestMapping(value="/devlopInfo/selectList.ajax", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public  String selectList(HttpServletRequest request, HttpServletResponse response) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		
		EgovMap searchVO = new EgovMap();
		if(null != request.getParameter("textSearch") && !"".equals(request.getParameter("textSearch"))) {
			searchVO.put("textSearch", request.getParameter("textSearch"));
		}else {
			searchVO.put("textSearch", "");
		}
		Enumeration<String> requestEnumKey = request.getParameterNames();
		while(requestEnumKey.hasMoreElements()) {
        	String strKey = requestEnumKey.nextElement();
            String strVal = request.getParameter(strKey);
            searchVO.put(strKey, strVal);
        }
		PaginationInfo paginationInfo = new PaginationInfo();
		BoardVO boardVO = new BoardVO();
		if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
		if(null != request.getParameter("pageUnit") && !"".equals(request.getParameter("pageUnit"))) {
			boardVO.setPageUnit(Integer.parseInt(request.getParameter("pageUnit")));
		}
		if(null != request.getParameter("pageSize") && !"".equals(request.getParameter("pageSize"))) {
			boardVO.setPageSize(Integer.parseInt(request.getParameter("pageSize")));
		}
		paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
		paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
		paginationInfo.setPageSize(boardVO.getPageSize());
		
		searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
		searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
		searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());
		
		List<?> resultList = devlopInfoService.selectDevlopInfoList(searchVO);
		
		
		int totCnt = devlopInfoService.selectDevlopInfoListTotCnt(searchVO);
		
		//지역1
		List<?> area1List= cmmnService.selectCodeList("AREA", "0000000000");
		//사업지구코드
		List<?> dsCodeList = cmmnService.selectCodeList("CMMN", "DS01000000");
		//시행사
		List<?> cpCodeList = cmmnService.selectCodeList("CMMN", "CP01000000");
		//법원코드
		List<?> coCodeList = cmmnService.selectCodeList("CMMN", "CO01000000");
		
		map.put("area1List" ,area1List);
		map.put("dsCodeList",dsCodeList);
		map.put("cpCodeList",cpCodeList);
		map.put("coCodeList",coCodeList);
		
		paginationInfo.setTotalRecordCount(totCnt);
		
		map.put("searchVO",searchVO);
		map.put("resultListTotCnt",totCnt);
		map.put("resultList",resultList);
		map.put("paginationInfo", paginationInfo);
		
		
		//샘플 페이지 이동
		return gson.toJson(map);
	}
	
	@RequestMapping(value="/devlopInfo/selectDetail.ajax", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public  String selectDetail(HttpServletRequest request, HttpServletResponse response) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		
		EgovMap searchVO = new EgovMap();
		searchVO.put("devlopInfoSn",request.getParameter("devlopInfoSn"));
		EgovMap resultList = devlopInfoService.selectDevlopInfoDetail(searchVO);
		
		//지역1
		List<?> area1List= cmmnService.selectCodeList("AREA", "0000000000");
		//사업지구코드
		List<?> dsCodeList = cmmnService.selectCodeList("CMMN", "DS01000000");
		//시행사
		List<?> cpCodeList = cmmnService.selectCodeList("CMMN", "CP01000000");
		//법원코드
		List<?> coCodeList = cmmnService.selectCodeList("CMMN", "CO01000000");
		
		map.put("area1List",area1List);
		map.put("dsCodeList",dsCodeList);
		map.put("cpCodeList",cpCodeList);
		map.put("coCodeList",coCodeList);
		
		map.put("searchVO",searchVO);
		map.put("resultList",resultList);
		
		
		
		//상세보기
		return gson.toJson(map);
	}
	
	@RequestMapping(value="/devlopInfo/insertDetail.ajax", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public  String insertDetail(HttpServletRequest request, HttpServletResponse response) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		EgovMap searchVO = new EgovMap();
		
		Enumeration<String> requestEnumKey = request.getParameterNames();
		while(requestEnumKey.hasMoreElements()) {
        	String strKey = requestEnumKey.nextElement();
            String strVal = request.getParameter(strKey);
            searchVO.put(strKey, strVal);
        }
		searchVO.put("useAt", "Y");
		searchVO.put("delAt", "N");		
		int insertResult = devlopInfoService.insertDevlopInfoDetail(searchVO);
		
		map.put("searchVO",searchVO);
		map.put("insertResult",insertResult);
		
		//상세보기
		return gson.toJson(map);
	}
	
	@RequestMapping(value="/devlopInfo/updateDetail.ajax", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public  String updateDetail(HttpServletRequest request, HttpServletResponse response) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		EgovMap searchVO = new EgovMap();
		
		Enumeration<String> requestEnumKey = request.getParameterNames();
		while(requestEnumKey.hasMoreElements()) {
        	String strKey = requestEnumKey.nextElement();
            String strVal = request.getParameter(strKey);
            searchVO.put(strKey, strVal);
        }
		int updateResult = devlopInfoService.updateDevlopInfoDetail(searchVO);
		
		map.put("searchVO",searchVO);
		map.put("updateResult",updateResult);
		
		//상세보기
		return gson.toJson(map);
	}
	
	@RequestMapping(value="/devlopInfo/deleteDetail.ajax", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public  String deleteDetail(HttpServletRequest request, HttpServletResponse response) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		EgovMap searchVO = new EgovMap();
			
		searchVO.put("devlopInfoSn",request.getParameter("devlopInfoSn"));
		searchVO.put("useAt", "N");
		searchVO.put("delAt", "Y");
		int updateResult = devlopInfoService.deleteDevlopInfoDetail(searchVO);
		
		map.put("searchVO",searchVO);
		map.put("updateResult",updateResult);
		
		//상세보기
		return gson.toJson(map);
	}
	
	@RequestMapping(value="/devlopInfo/selectPrtnList.ajax", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public  String selectPrtnList(HttpServletRequest request, HttpServletResponse response) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		EgovMap searchVO = new EgovMap();
			
		searchVO.put("devlopInfoSn",request.getParameter("devlopInfoSn"));
		List<?> resultList = devlopInfoService.selectPrtnDevlopInfoList(searchVO);
		
		map.put("searchVO",searchVO);
		map.put("resultList",resultList);
		
		//상세보기
		return gson.toJson(map);
	}
	
	@RequestMapping(value="/devlopInfo/selectPrtnDetail.ajax", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public  String selectPrtnDetail(HttpServletRequest request, HttpServletResponse response) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		EgovMap searchVO = new EgovMap();
			
		searchVO.put("bsnsPrtnSttusSn",request.getParameter("bsnsPrtnSttusSn"));
		EgovMap resultList = devlopInfoService.selectPrtnDevlopInfoDetail(searchVO);
		
		map.put("searchVO",searchVO);
		map.put("resultList",resultList);
		
		//상세보기
		return gson.toJson(map);
	}
	/*@RequestMapping(value="/devlopInfo/insertPrtnDetail.ajax", method=RequestMethod.POST)
	public  String insertPrtnDetail(HttpServletRequest request, HttpServletResponse response, MultipartHttpServletRequest multi) throws Exception{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		EgovMap searchVO = new EgovMap();
		
		Enumeration<String> requestEnumKey = request.getParameterNames();
		while(requestEnumKey.hasMoreElements()) {
        	String strKey = requestEnumKey.nextElement();
            String strVal = request.getParameter(strKey);
            searchVO.put(strKey, strVal);
        }
		searchVO.put("useAt", "Y");
		searchVO.put("delAt", "N");
		
		//파일첨부
		List<FileVO> result = null;
	    String atchFileId = "";
	    
	    //다중파일 업로드
    	final Map<String, MultipartFile> files = multi.getFileMap();
	    if (!files.isEmpty()) {
			result = fileUtil.parseFileInf(files, "BBS_", 0, "", "");
			atchFileId = fileMngService.insertFileInfs(result);
			searchVO.put("atchFileId", atchFileId);
	    }
		
		int updateResult = devlopInfoService.insertPrtnDevlopInfoDetail(searchVO);
		
		map.put("searchVO",searchVO);
		map.put("updateResult",updateResult);
		
		//상세보기
		return gson.toJson(map);
	}*/
	@RequestMapping(value="/devlopInfo/insertPrtnDetail.ajax", method=RequestMethod.POST , produces = "application/text; charset=utf-8")
	@ResponseBody
	public  String insertPrtnDetail(HttpServletRequest request, HttpServletResponse response, MultipartHttpServletRequest multi) throws Exception{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		EgovMap searchVO = new EgovMap();
		//request.setCharacterEncoding("utf-8");
		
		Enumeration<String> requestEnumKey = request.getParameterNames();
		while(requestEnumKey.hasMoreElements()) {
			String strKey = requestEnumKey.nextElement();
			String str2Val = request.getParameter(strKey);
			String strVal = URLDecoder.decode(request.getParameter(strKey), "utf-8");
			searchVO.put(strKey, strVal);
		}
		searchVO.put("useAt", "Y");
		searchVO.put("delAt", "N");
		
		//파일첨부
		List<FileVO> result = null;
		String atchFileId = "";
		
		//다중파일 업로드
		final Map<String, MultipartFile> files = multi.getFileMap();
		if (!files.isEmpty()) {
			result = fileUtil.parseFileInf(files, "BBS_", 0, "", "");
			atchFileId = fileMngService.insertFileInfs(result);
			searchVO.put("atchFileId", atchFileId);
		}
		
		int updateResult = devlopInfoService.insertPrtnDevlopInfoDetail(searchVO);
		
		map.put("searchVO",searchVO);
		map.put("updateResult",updateResult);
		
		//상세보기
		return gson.toJson(map);
	}
	
	@RequestMapping(value="/devlopInfo/updatePrtnDetail.ajax", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public  String updatePrtnDetail(HttpServletRequest request, HttpServletResponse response) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		EgovMap searchVO = new EgovMap();
		
		Enumeration<String> requestEnumKey = request.getParameterNames();
		while(requestEnumKey.hasMoreElements()) {
        	String strKey = requestEnumKey.nextElement();
            String strVal = request.getParameter(strKey);
            searchVO.put(strKey, strVal);
        }
		
		int updateResult = devlopInfoService.updatePrtnDevlopInfoDetail(searchVO);
		
		map.put("searchVO",searchVO);
		map.put("updateResult",updateResult);
		
		//상세보기
		return gson.toJson(map);
	}
	
	@RequestMapping(value="/devlopInfo/deletePrtnDetail.ajax", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public  String deletePrtnDetail(HttpServletRequest request, HttpServletResponse response) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		EgovMap searchVO = new EgovMap();
			
		searchVO.put("bsnsPrtnSttusSn",request.getParameter("bsnsPrtnSttusSn"));
		searchVO.put("useAt", "N");
		searchVO.put("delAt", "Y");
		int updateResult = devlopInfoService.deletePrtnDevlopInfoDetail(searchVO);
		
		map.put("searchVO",searchVO);
		map.put("updateResult",updateResult);
		
		//상세보기
		return gson.toJson(map);
	}
	
	@RequestMapping(value="/devlopInfo/selectArea2List.ajax", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public  String selectArea2List(HttpServletRequest request, HttpServletResponse response) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		String legaldongCode = (String)request.getParameter("legaldongCode");
		List<?> area2List = cmmnService.selectCodeList("AREA",legaldongCode);
		
		map.put("area2List",area2List);
		return gson.toJson(map);
	}
	
	@RequestMapping(value = "/FileDown.do") 
	public void fileDownload(@RequestParam Map<String, Object> commandMap, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String atchFileId = (String) commandMap.get("atchFileId");
		String fileSn = (String) commandMap.get("fileSn");
		
//		Boolean isAuthenticated = EgovUserDetailsHelper.isAuthenticated();
		
//		if (isAuthenticated) {

			FileVO fileVO = new FileVO();
			fileVO.setAtchFileId(atchFileId);
			fileVO.setFileSn(fileSn);
			FileVO fvo = fileMngService.selectFileInf(fileVO);
			File uFile = new File(fvo.getFileStreCours(), fvo.getStreFileNm());
			long fSize = uFile.length();

			if (fSize > 0) {
				String mimetype = "application/x-msdownload";
				
				String userAgent = request.getHeader("User-Agent");
				HashMap<String,String> result = EgovBrowserUtil.getBrowser(userAgent);
				if ( !EgovBrowserUtil.MSIE.equals(result.get(EgovBrowserUtil.TYPEKEY)) ) {
					mimetype = "application/x-stuff";
				}

				String contentDisposition = EgovBrowserUtil.getDisposition(fvo.getOrignlFileNm(),userAgent,"UTF-8");
				//response.setBufferSize(fSize);	// OutOfMemeory 발생
				response.setContentType(mimetype);
				//response.setHeader("Content-Disposition", "attachment; filename=\"" + contentDisposition + "\"");
				response.setHeader("Content-Disposition", contentDisposition);
				response.setContentLengthLong(fSize);

				/*
				 * FileCopyUtils.copy(in, response.getOutputStream());
				 * in.close();
				 * response.getOutputStream().flush();
				 * response.getOutputStream().close();
				 */
				BufferedInputStream in = null;
				BufferedOutputStream out = null;

				try {
					in = new BufferedInputStream(new FileInputStream(uFile));
					out = new BufferedOutputStream(response.getOutputStream());

					FileCopyUtils.copy(in, out);
					out.flush();
				} catch (IOException ex) {
					// 다음 Exception 무시 처리
					// Connection reset by peer: socket write error
					EgovBasicLogger.ignore("IO Exception", ex);
				} finally {
					EgovResourceCloseHelper.close(in, out);
				}

			} else {
				response.setContentType("application/x-msdownload");

				PrintWriter printwriter = response.getWriter();
				
				printwriter.println("<html>");
				printwriter.println("<br><br><br><h2>Could not get file name:<br>" + fvo.getOrignlFileNm() + "</h2>");
				printwriter.println("<br><br><br><center><h3><a href='javascript: history.go(-1)'>Back</a></h3></center>");
				printwriter.println("<br><br><br>&copy; webAccess");
				printwriter.println("</html>");
				
				printwriter.flush();
				printwriter.close();
			}
			
			
		}

}

