package gzonei.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import java.util.stream.IntStream;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Repository;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import egovframework.com.cmm.service.EgovProperties;
import egovframework.rte.psl.dataaccess.util.EgovMap;
import gzonei.str.service.StrService;

@Repository("FileUtils")
public class FileUtils {
	
	@Resource(name = "StrService")
	private StrService strService;
	
	// 기본 경로
	final String path = EgovProperties.getProperty("Globals.SynchrnServerPath");
	
	
	
//	public List<FileVO> parseFileInf(Map<String, MultipartFile> files, String KeyStr, int fileKeyParam, String atchFileId, String storePath) throws Exception {
	public String insertFileInf(MultipartHttpServletRequest multi, String KeyStr, String atchFileId, String storePath) throws Exception{
		EgovMap fileVO = new EgovMap();
		
		// 파일 업로드 변수 설정
		int fileCnt = 1; // 파일 순번
		List<?> fileArr= null; // 파일 리스트
		String fileInput;
		String nowTime= getDate();
		String fileNum = "";
		String fileExt = ""; // 확장자
		String fileNameExtension = ""; // 확장자
		long fileSize; // 파일 크기
		String atchFileIdString = ""; // 첨부파일 ID
		String changeFileName = ""; // 바뀐 파일 명
		String newPath = path +storePath; // 저장경로 
		String fileStreCours = ""; // 바뀐 파일 명
		int maxFileSn = 0;
		Boolean editAt = false; // 수정여부
		Boolean fileEdit = false; // 수정
		
		File dir = new File(newPath);
		if(!dir.isDirectory()) { // 파일 없을시 생성
			dir.mkdirs();
		}
		System.out.println("att : "+atchFileId);
		
		// 첨부파일 여부 확인
		if(atchFileId == null || atchFileId == "") {
			Iterator<String> testFiles = multi.getFileNames();
			System.out.println("testFiles : "+testFiles);
			MultipartFile test = multi.getFile(testFiles.next());
			System.out.println("test : "+test);
			System.out.println("test Empty : "+test.isEmpty());
			if (test.isEmpty() == false) {
				atchFileId = UUID.randomUUID().toString();
				atchFileIdString = atchFileId.substring(19);			
				fileVO.put("atchFileId", atchFileIdString);
				strService.insertFileAtrb(fileVO);
			} else {
				atchFileId = null;
				atchFileIdString = atchFileId;
				return atchFileIdString;
			}
		}else {
			atchFileIdString = atchFileId;
			editAt = true;
			maxFileSn = strService.maxAtchFileSn(atchFileId)+1;
			fileVO.put("atchFileId", atchFileIdString);
			fileArr = strService.selectAtchFileArray(atchFileIdString);
			System.out.println("수정 활성화");
			System.out.println("첨부파일 아이디 : "+ atchFileIdString);
			System.out.println("마지막 파일순번 : "+ maxFileSn);
		}

		System.out.println("첨부파일 아이디: "+ atchFileIdString);
		System.out.println("newPath "+ newPath);
		// 파일 업로드
		Iterator<String> files = multi.getFileNames();
		while(files.hasNext()) {
			String uploadFile = files.next();
			MultipartFile mFile = multi.getFile(uploadFile);
			fileSize = mFile.getSize();
			String fileName = mFile.getOriginalFilename();
			if(mFile.isEmpty() == false) {
				System.out.println("파일있음");
				fileInput = mFile.getName();
				fileNum = fileInput.substring(fileInput.lastIndexOf("_")+1);
				System.out.println("파일 이름 : "+ mFile.getName());
				System.out.println("File Input : "+ fileInput);			
				System.out.println("File Number : "+ fileNum);			
				System.out.println("File Number2 : "+ fileCnt);			
				fileExt = fileName.substring(fileName.lastIndexOf("."));
				fileNameExtension = fileName.substring(fileName.lastIndexOf(".")+1);
				changeFileName = KeyStr + atchFileIdString + "_" +fileNum + fileExt;
				fileStreCours = newPath+"\\"+ changeFileName;
				System.out.println("파일순번 : "+ fileNum);
				System.out.println("마지막파일순번 : "+ maxFileSn);
				System.out.println("파일 저장경로 : "+ newPath);
				System.out.println("실제파일이름 : "+ fileName);
				System.out.println("바뀐 파일 이름 : "+ changeFileName);
				System.out.println("파일크기 : "+ fileSize);
				System.out.println("파일확장자 : "+ fileNameExtension);
				fileVO.put("fileSn", fileNum);
				fileVO.put("fileStreCours", fileStreCours);
				fileVO.put("streFileNm", changeFileName);
				fileVO.put("orignlFileNm", fileName);
				fileVO.put("fileExtsn", fileNameExtension);
				fileVO.put("fileSize", fileSize);
				fileVO.put("uploadDt", storePath);
				if(editAt == true) {
					// 기존 첨부파일 삭제
					//fileArr.get(0).get("fileSn").toString();
					for(Object map : fileArr) {
						System.out.println("fileNum : "+fileNum);
						System.out.println("map : "+((EgovMap) map).get("fileSn"));
						Boolean test2 = String.valueOf(((EgovMap) map).get("fileSn")).equals(fileNum);
						
						System.out.println("equals 2번째 확인 : "+ test2);
//						System.out.println("test : "+test);
//						System.out.println("2번째 equals 확인 : "+ test.equals(fileNum));
						if(test2 == true) {
							System.out.println("같음");
							fileEdit = true;
						}
//						if(test == fileNum) {
//							System.out.println("같음");
//							fileEdit = true;
//						}
					}
					if(fileEdit == true) {
						System.out.println("수정함"); 
						strService.deleteAtchFile(fileVO);
						fileEdit= false;
					}
					// 새로운 첨부파일 추가
					storePath = nowTime;
					newPath = path +storePath;
					changeFileName = KeyStr + atchFileIdString + "_" + maxFileSn + fileExt;
					System.out.println("newPath : "+newPath);
					fileStreCours = newPath+"\\"+ changeFileName;
					
					System.out.println("새 저장 경로 : "+fileStreCours);
					fileVO.put("streFileNm", changeFileName);
					fileVO.put("uploadDt", storePath);
					fileVO.put("fileSn", maxFileSn);
					fileVO.put("fileStreCours", fileStreCours);
					strService.insertFileDetail(fileVO);						
				}else {
					System.out.println("수정 안함");
					fileVO.put("fileSn", fileCnt);
					strService.insertFileDetail(fileVO);						
				}
				try {
					mFile.transferTo(new File(fileStreCours));
				} catch(Exception e) {
					e.printStackTrace();
				}
				fileCnt++;
				maxFileSn++;
			}
		}
		System.out.println("리턴 직전 fileNum : "+ fileNum);
		return atchFileIdString;
	}
	
	// 현재 시간 가져오기
	public String getDate() {
		String rtnStr = null;

		// 문자열로 변환하기 위한 패턴 설정(년도-월-일 시:분:초:초(자정이후 초))
		String pattern = "YYYY/MM/dd";

		SimpleDateFormat sdfCurrent = new SimpleDateFormat(pattern);
		Date date = new Date();

		rtnStr = sdfCurrent.format(date);

		return rtnStr;
	}
}
