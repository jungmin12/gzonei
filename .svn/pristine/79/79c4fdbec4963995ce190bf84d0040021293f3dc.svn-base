package gzonei.invt.web;

import java.io.IOException;
import java.sql.SQLException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;

import egovframework.com.cop.bbs.service.BoardVO;
import egovframework.rte.fdl.property.EgovPropertyService;
import egovframework.rte.psl.dataaccess.util.EgovMap;
import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import gzonei.invt.service.InvtService;

@Controller
public class InvtController {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(InvtController.class);
	
	/** invtService */
	@Resource(name = "InvtService")
	private InvtService invtService;
	
    /** EgovPropertyService */
    @Resource(name = "propertiesService")
    private EgovPropertyService propertiesService;
    
	/**
	 * 샘플 조회(코드리스트) 페이지
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException , IOException
	 */
	@RequestMapping(value="/invt/InvtList.do")
	public String invtPage(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		EgovMap searchVO = new EgovMap();
		if(null != request.getParameter("textSearch") && !"".equals(request.getParameter("textSearch"))) {
			searchVO.put("textSearch", request.getParameter("textSearch"));
		}else {
			searchVO.put("textSearch", "");
		}
		
		PaginationInfo paginationInfo = new PaginationInfo();
		BoardVO boardVO = new BoardVO();
		if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
		paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
		paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
		paginationInfo.setPageSize(boardVO.getPageSize());
		
		searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
		searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
		searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());
		
		List<?> resultList = invtService.selectInvtList(searchVO);
		int totCnt = invtService.selectInvtListCnt(searchVO);
		
		paginationInfo.setTotalRecordCount(totCnt);
		
		model.addAttribute("searchVO",searchVO);
		model.addAttribute("resultListTotCnt",totCnt);
		model.addAttribute("resultList",resultList);
		model.addAttribute("paginationInfo", paginationInfo);
		
		return "gzonei/invt/invtInfoList";
	}
	
	@RequestMapping(value="/invt/selectInvtList.do", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public String selectinvtPage(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		
		EgovMap searchVO = new EgovMap();
		if(null != request.getParameter("textSearch") && !"".equals(request.getParameter("textSearch"))) {
			searchVO.put("textSearch", request.getParameter("textSearch"));
		}else {
			searchVO.put("textSearch", "");
		}
		
		Enumeration<String> requestEnumKey = request.getParameterNames();
		while(requestEnumKey.hasMoreElements()) {
        	String strKey = requestEnumKey.nextElement();
            String strVal = request.getParameter(strKey);
            searchVO.put(strKey, strVal);
        }
		
		PaginationInfo paginationInfo = new PaginationInfo();
		BoardVO boardVO = new BoardVO();
		if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
		paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
		paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
		paginationInfo.setPageSize(boardVO.getPageSize());
		
		searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
		searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
		searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());
		
		List<?> resultList = invtService.selectInvtList(searchVO);
		int totCnt = invtService.selectInvtListCnt(searchVO);
		
		paginationInfo.setTotalRecordCount(totCnt);
		
		map.put("searchVO",searchVO);
		map.put("resultListTotCnt",totCnt);
		map.put("resultList",resultList);
		map.put("paginationInfo", paginationInfo);
		
		//샘플 페이지 이동
		return gson.toJson(map);
	}
	
	@RequestMapping(value="/invt/selectDetail.do", method=RequestMethod.POST , produces = "application/text; charset=utf8")
	@ResponseBody
	public  String selectDetail(HttpServletRequest request, HttpServletResponse response) throws SQLException , IOException{
		HashMap<String,Object> map = new HashMap<String,Object>();
		Gson gson = new Gson();
		
		EgovMap searchVO = new EgovMap();
		searchVO.put("invtInfoSn",request.getParameter("invtInfoSn"));
		EgovMap resultList = invtService.selectInvtDetail(searchVO);
		
		map.put("searchVO",searchVO);
		map.put("resultList",resultList);
		
		//상세보기
		return gson.toJson(map);
	}
	
}
