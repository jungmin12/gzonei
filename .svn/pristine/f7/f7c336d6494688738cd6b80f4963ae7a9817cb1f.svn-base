package gzonei.cmmnty.web;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import egovframework.com.cop.bbs.service.BoardVO;
import egovframework.rte.fdl.property.EgovPropertyService;
import egovframework.rte.psl.dataaccess.util.EgovMap;
import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import gzonei.cmmnty.service.QnaService;
import gzonei.sample.web.SampleController;
import gzonei.str.service.StrService;
import gzonei.util.FileUtils;

/**
 * 커뮤니티 게시물 관리를 위한 컨트롤러 클래스
 * @author 개발 3팀 안중원
 * @since 2021.03.04
 * @version 1.0
 *   
 *   수정일              수정자          수정내용
 *  ----------   -------   ---------------------------
 *  2021.03.04   안중원          최초 생성
 *
 *
 */
@Controller
public class QnaController {

	private static final Logger LOGGER = LoggerFactory.getLogger(SampleController.class);
	
	@Resource(name = "QnaService")
	private QnaService qnaservice;
	
	@Resource(name = "StrService")
	private StrService strservice;
	
	@Resource(name = "FileUtils")
	private FileUtils fileUtils;
	
    /** EgovPropertyService */
    @Resource(name = "propertiesService")
    private EgovPropertyService propertyService;
    
    /**
     * 게시판 목록 조회 및 검색한다.
     * 
     * @param req
     * @param res
     * @return model
     * @throws 
     */ 
    @RequestMapping(value="/cmmnty/qnaBbsList.do")
    public String selectQnaArticleList(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException {
    	
    	EgovMap searchVO = new EgovMap(); 
    	PaginationInfo paginationInfo = new PaginationInfo();
        BoardVO boardVO = new BoardVO();
        
        if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
        
        paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
        paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
        paginationInfo.setPageSize(boardVO.getPageSize());
      
        searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
        searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
        searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());
        
    	searchVO.put("searchType", request.getParameter("searchType"));
		searchVO.put("keyword", request.getParameter("keyword"));
		searchVO.put("startDay", request.getParameter("startDay"));
		searchVO.put("endDay", request.getParameter("endDay"));
		System.out.println(request.getParameter("startDay"));
		
		

    	//** 일반 게시물
    	List<?> resultList = qnaservice.selectQnaArticleList(searchVO);	
    	//** 공지 게시물
    	List<?> noticeList = qnaservice.selectQnaNoticeList(searchVO);
    	
		int totCnt = qnaservice.selectqnaListTotCnt(searchVO);
		paginationInfo.setTotalRecordCount(totCnt);
		

		model.addAttribute("searchVO",searchVO);
		model.addAttribute("paginationInfo", paginationInfo);
		model.addAttribute("totCnt", totCnt);
		model.addAttribute("noticeList",noticeList);
		model.addAttribute("resultList",resultList);

		return "/gzonei/cmmnty/qnaBbsList";
    }
    
    /**
     * 
     * 게시물을 상세조회한다.
     * 
     * @param req
     * @param res
     * @return model
     * @throws Exception 
     */
    @RequestMapping(value="/cmmnty/qnaBbsDetail.do")
    public String selectQnaArticleDetail(HttpServletRequest request, HttpServletResponse response, Model model) throws Exception  {
    	EgovMap searchVO = new EgovMap();
		searchVO.put("nttId", request.getParameter("nttId"));
		
    	String atchFileId = strservice.selectAtchFileId(searchVO);		
    	System.out.println("첨부파일 Id : "+ atchFileId);
    	if(!(atchFileId == "" || atchFileId == null)) {
    		List<?> atchFileDetail = strservice.selectAtchFileDetail(atchFileId);
    		model.addAttribute("atchFileDetail", atchFileDetail);
    	}
    	
		int rdcntUpdt = qnaservice.updateBbsRdcnt(searchVO);
		EgovMap result = qnaservice.selectqnbBbsDetail(searchVO);
		List<?> commentList = qnaservice.selectqnaBbsComment(searchVO);
		System.out.println(rdcntUpdt);
		
		model.addAttribute("articleNum", request.getParameter("articleNum"));
		model.addAttribute("commentList",commentList);
		model.addAttribute("result",result);
		
		
		return "/gzonei/cmmnty/qnaBbsDetail";
    }
    
    /**
     * @throws Exception 
     * 게시물을 삭제한다.
     * 
     * @param req
     * @param res
     * @return model
     * @throws 
     */
    @RequestMapping(value="/cmmnty/qnaBbsDelete.do")
    public String deleteQnaArticle(HttpServletRequest request, HttpServletResponse response, Model model) throws Exception  {
		EgovMap searchVO = new EgovMap();
		searchVO.put("nttId", request.getParameter("nttId"));
		
		searchVO.put("atchFileId", request.getParameter("atchFileId"));		
		strservice.deleteAtchFile(searchVO);
		strservice.deleteAtchFileAtrb(searchVO);
		
		int check = qnaservice.deleteQnaArticle(searchVO);
		
		System.out.println(check);
		
    	return "redirect:/cmmnty/qnaBbsList.do";
    }
    /**
     * @throws Exception 
     * 게시물을 등록한다.
     * 
     * @param req
     * @param res
     * @return model
     * @throws 
     */
    @RequestMapping(value="/cmmnty/qnaBbsRgst.do")
    public String insertQnaArticle(@RequestParam Map<String, Object> commandMap,MultipartHttpServletRequest multi , HttpServletResponse response, Model model) throws Exception  {
    	
    	String date = fileUtils.getDate();
    	String atchFileId = fileUtils.insertFileInf(multi,"BBS_","",date);
    	commandMap.put("atchFileId", atchFileId);
    	
    	String nttcn = ((String) commandMap.get("nttCn")).replace("&amp;","&").replace("&lt;","<").replace("&gt;",">").replace("&quot;", "\"");
    	commandMap.replace("nttCn", nttcn);
    	int insertcheck = qnaservice.createQnaArticle(commandMap);
		if(insertcheck==1) {
			System.out.println("게시글 등록");
		}
		model.addAttribute("insertcheck",insertcheck);
    	return "redirect:/cmmnty/qnaBbsList.do";
    }
    
    /**
     * 등록 페이지로 이동한다.
     */
    @RequestMapping(value="/cmmnty/qnaBbsRegist.do")
    public String toinsertArticleList(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException {
    	return "gzonei/cmmnty/qnaBbsRegist";
    }
    
    
    /**
     * 말머리페이지로 이동한다.
     */
    @RequestMapping(value="/cmmnty/qnaCtsList.do")
    public String toactsArticleList(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException {
    	EgovMap searchVO = new EgovMap(); 
    	PaginationInfo paginationInfo = new PaginationInfo();
        BoardVO boardVO = new BoardVO();
        
        if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
        
        paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
        paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
        paginationInfo.setPageSize(boardVO.getPageSize());

        searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
        searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
        searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());
        
    	searchVO.put("searchType", request.getParameter("searchType"));
		searchVO.put("keyword", request.getParameter("keyword"));
		
    	searchVO.put("bbsTabCode", "말머리");

    	//** 일반 게시물
    	List<?> resultList = qnaservice.selectQnaTabArticleList(searchVO);	
    	//** 공지 게시물
    	List<?> noticeList = qnaservice.selectQnaTabNoticeList(searchVO);
    	
    	int totCnt = qnaservice.selectqnaTabListTotCnt(searchVO);
		paginationInfo.setTotalRecordCount(totCnt);
		
		
		model.addAttribute("searchVO",searchVO);
		model.addAttribute("paginationInfo", paginationInfo);
		model.addAttribute("totCnt", totCnt);
		model.addAttribute("noticeList",noticeList);
		model.addAttribute("resultList",resultList);
    	return "gzonei/cmmnty/qnaCtsList";
    }
    /**
     * 탈퇴 페이지로 이동한다.
     */
    @RequestMapping(value="/cmmnty/qnaSecsnList.do")
    public String toanmchArticleList(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException {
    	EgovMap searchVO = new EgovMap();

    	PaginationInfo paginationInfo = new PaginationInfo();
        BoardVO boardVO = new BoardVO();
        
        if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
        
        paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
        paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
        paginationInfo.setPageSize(boardVO.getPageSize());
      
//        searchVO.put("pageSize",boardVO.getPageSize());
        searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
        searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
        searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());
        
    	searchVO.put("searchType", request.getParameter("searchType"));
		searchVO.put("keyword", request.getParameter("keyword"));
		
    	searchVO.put("bbsTabCode", "탈퇴신청");

    	//** 일반 게시물
    	List<?> resultList = qnaservice.selectQnaTabArticleList(searchVO);	
    	//** 공지 게시물
    	List<?> noticeList = qnaservice.selectQnaTabNoticeList(searchVO);
    	
    	int totCnt = qnaservice.selectqnaTabListTotCnt(searchVO);
		paginationInfo.setTotalRecordCount(totCnt);
		
		
		model.addAttribute("searchVO",searchVO);
		model.addAttribute("paginationInfo", paginationInfo);
		model.addAttribute("totCnt", totCnt);
		model.addAttribute("noticeList",noticeList);
		model.addAttribute("resultList",resultList);
    	return "gzonei/cmmnty/qnaSecsnList";
    }
    /**
     * 이름변경 게시물을 등록페이지로 이동한다.
     */
    @RequestMapping(value="/cmmnty/qnaNmchList.do")
    public String tosecsnArticleList(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException {
    	EgovMap searchVO = new EgovMap(); 
    	PaginationInfo paginationInfo = new PaginationInfo();
        BoardVO boardVO = new BoardVO();
        
        if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
        
        paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
        paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
        paginationInfo.setPageSize(boardVO.getPageSize());
      
//        searchVO.put("pageSize",boardVO.getPageSize());
        searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
        searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
        searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());
        
    	searchVO.put("searchType", request.getParameter("searchType"));
		searchVO.put("keyword", request.getParameter("keyword"));
		
    	searchVO.put("bbsTabCode", "이름변경");

    	//** 일반 게시물
    	List<?> resultList = qnaservice.selectQnaTabArticleList(searchVO);	
    	//** 공지 게시물
    	List<?> noticeList = qnaservice.selectQnaTabNoticeList(searchVO);
    	
    	int totCnt = qnaservice.selectqnaTabListTotCnt(searchVO);
		paginationInfo.setTotalRecordCount(totCnt);
		
		
		model.addAttribute("searchVO",searchVO);
		model.addAttribute("paginationInfo", paginationInfo);
		model.addAttribute("totCnt", totCnt);
		model.addAttribute("noticeList",noticeList);
		model.addAttribute("resultList",resultList);
    	return "gzonei/cmmnty/qnaNmchList";
    }
    /**
     * 수정 페이지로 이동한다.
     */
    @RequestMapping(value="/cmmnty/qnaBbsUpdate.do")
    public String toupdateArticleList(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException {
    	EgovMap searchVO = new EgovMap();
    	searchVO.put("nttId", request.getParameter("nttId"));
    	String atchFileId = strservice.selectAtchFileId(searchVO);
		
		System.out.println("첨부파일 Id : "+ atchFileId);
		if(!(atchFileId == "" || atchFileId == null)) {
			List<?> atchFileDetail = strservice.selectAtchFileDetail(atchFileId);
			model.addAttribute("atchFileDetail", atchFileDetail);
		}
    	EgovMap result = qnaservice.selectqnbBbsDetail(searchVO);
    	model.addAttribute("result",result);
    	return "gzonei/cmmnty/qnaBbsUpdate";
    }
    /**
     * @throws Exception 
     * 게시글 수정.
     * 
     * @param req
     * @param res
     * @return model
     * @throws 
     */
    @RequestMapping(value="/cmmnty/qnaBbsUdt.do")
    public String updateArticle(@RequestParam Map<String, Object> commandMap,MultipartHttpServletRequest multi,HttpServletRequest request, HttpServletResponse response, Model model) throws Exception  {
    	
    	String nttcn = ((String) commandMap.get("nttCn")).replace("&amp;","&").replace("&lt;","<").replace("&gt;",">").replace("&quot;", "\"");
    	commandMap.replace("nttCn", nttcn);
    	
    	String uploadDt = request.getParameter("uploadDt");
    	String nttid = (String) commandMap.get("nttId");
    	
    	String atchFileId = request.getParameter("atchFileId");
    	System.out.println("asd : "+atchFileId);
    	fileUtils.insertFileInf(multi,"BBS_",atchFileId,uploadDt);
    	
    	int updatecheck = qnaservice.qnaBbsArticleUpdt(commandMap);
		if(updatecheck==1) {
			System.out.println("게시글 등록");
		}
		model.addAttribute("updatecheck",updatecheck);
    	return "redirect:/cmmnty/qnaBbsList.do?nttId="+nttid;
    }
    
    
    /**
	 * 게시판 댓글 등록하기
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException , IOException
	 */
	@RequestMapping(value="/cmmnty/insertComment.do", method=RequestMethod.POST)
	@ResponseBody
	public void qnainsertComment(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{

//		LoginVO user = (LoginVO)EgovUserDetailsHelper.getAuthenticatedUser();
//		Boolean isAuthenticated = EgovUserDetailsHelper.isAuthenticated();
        
		EgovMap commentVO = new EgovMap();

		int nttId = Integer.parseInt(request.getParameter("nttId"));
		String answer = request.getParameter("answer");
		String frstRegisterId = request.getParameter("frstRegisterId");

		commentVO.put("nttId", nttId);
		commentVO.put("answer", answer);
		commentVO.put("frstRegisterId", frstRegisterId);

		qnaservice.insertComment(commentVO);

	}
	

	/**
	 * 게시판 댓글 삭제하기
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException , IOException
	 */
	@RequestMapping(value="/cmmnty/deleteComment.do", method=RequestMethod.POST)
	@ResponseBody
	public void qnadeleteComment(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{

//		LoginVO user = (LoginVO)EgovUserDetailsHelper.getAuthenticatedUser();
//		Boolean isAuthenticated = EgovUserDetailsHelper.isAuthenticated();
        
		EgovMap commentVO = new EgovMap();

		int nttId = Integer.parseInt(request.getParameter("nttId"));
		int answerNo = Integer.parseInt(request.getParameter("answerNo"));

		commentVO.put("nttId", nttId);
		commentVO.put("answerNo", answerNo);
	
		qnaservice.deleteComment(commentVO);

	}
	
	/**
	 * 게시판 댓글 수정하기
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException , IOException
	 */
	@RequestMapping(value="/cmmnty/updateComment.do", method=RequestMethod.POST)
	@ResponseBody
	public void qnaupdateComment(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
//		LoginVO user = (LoginVO)EgovUserDetailsHelper.getAuthenticatedUser();
//		Boolean isAuthenticated = EgovUserDetailsHelper.isAuthenticated();
		
		EgovMap commentVO = new EgovMap();
		
		int nttId = Integer.parseInt(request.getParameter("nttId"));
		int answerNo = Integer.parseInt(request.getParameter("answerNo"));
		String answer = request.getParameter("answer");
	
		
		commentVO.put("nttId", nttId);
		commentVO.put("answerNo", answerNo);
		commentVO.put("answer", answer);
		
		qnaservice.updateComment(commentVO);
		
	}
}

