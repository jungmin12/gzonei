package gzonei.member.web;


import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.beanutils.BeanUtils;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.jasypt.commons.CommonUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.ibm.icu.text.SimpleDateFormat;
import com.ibm.icu.util.Calendar;

import egovframework.com.cmm.LoginVO;
import egovframework.com.cop.bbs.service.BoardVO;
import egovframework.com.utl.fcc.service.EgovStringUtil;
import egovframework.com.utl.sim.service.EgovFileScrty;
import egovframework.rte.psl.dataaccess.util.EgovMap;
import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;
import gzonei.cmmn.service.CmmnService;
import gzonei.member.service.CertificationVO;
import gzonei.member.service.MemberService;

/**
* 
* MemberController
* @author PODO 개발3팀 김승제
* @since 2021.01.26
* @version 1.0
* @see
* ************ 개발 고려사항  ************ 
*
*
*
* <pre>
* << 개정이력(Modification Information) >>
*
*   수정일     	 	수정자          	수정내용
*  -------    --------    ---------------------------
*  2021.01.26      김승제         		최초 생성
*  
*
*  </pre>
*/
@Controller
public class MemberController {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(MemberController.class);
	
	/** MemberService */
	@Resource(name = "MemberService")
	private MemberService memberService;
	
	/** CmmnService */
	@Resource(name = "cmmnService")
	private CmmnService cmmnService;
	
	/** 희진 */
	
	/**
	 * 회원가입 동의 화면(약관동의)
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/agreement.do")
	public String agreement(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		//날짜 생성
		Calendar today = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		String day = sdf.format(today.getTime());

		java.util.Random ran = new Random();
		//랜덤 문자 길이
		int numLength = 6;
		String randomStr = "";

		for (int i = 0; i < numLength; i++) {
			//0 ~ 9 랜덤 숫자 생성
			randomStr += ran.nextInt(10);
		}

		//reqNum은 최대 40byte 까지 사용 가능
		String reqNum = day + randomStr;
		String certDate=day;

		String	serverType = "dev";
		String	serviceNum = CertificationVO.SERVICE_LOCAL_NUMBER;
		String	returnUrl = "32http://dev.gzonei.com:8888";
		if	("dev".equals(serverType))	{
			serviceNum	= CertificationVO.SERVICE_DEV_NUMBER;
			returnUrl		= "32http://localhost:8080";
		}
		else if	("real".equals(serverType))	{
			serviceNum	= CertificationVO.SERVICE_REAL_NUMBER;
			returnUrl		= "32http://www.gzonei.com";
		}
		
		EgovMap paramVO = new EgovMap();
		paramVO.put("serviceNum", serviceNum);
		paramVO.put("reqNum", reqNum);
		paramVO.put("certDate", certDate);
		paramVO.put("returnUrl", returnUrl);
		
		model.addAttribute("paramVO",paramVO);
		
		return "gzonei/member/agreement";
	}
	/**
	 * 실명인증 보내기
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value = "/pccSendSeed.do")
	public String pccSendSeed(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{

		CertificationVO	certVO	= new CertificationVO();

		try {
			BeanUtils.populate(certVO, request.getParameterMap());
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		certVO.encodeInfo(response);
		model.addAttribute("certVO",certVO);
		 
		return "gzonei/member/pccSendSeed";
	}
	/**
	 * 실명인증 요청 수신
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value = "/pccRecieveSeed.do")
	public String pccRecieveSeed(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		CertificationVO	certVO	= new CertificationVO();
		
		try {
			BeanUtils.populate(certVO, request.getParameterMap());
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		certVO.decodeInfo(request);
		
		String param = "";
		String enc_retInfo   = certVO.getRetInfo().trim();

		param= "&retInfo="+enc_retInfo;

		String	sCheckType	= "FALSE";
		String	sMsg		= "";
		String	phoneNo		= "";
		String	userName	= "";

		if( !certVO.isPassMsg() ){
			sMsg	= "비정상적인 접근입니다.!!";
		}
		else if	( !certVO.isSuccess() )	{
			sMsg	= "본인 확인에 실패 하였습니다.!!\\n정확한 정보를 입력하시기 바랍니다.";
		}
		else	{
			//탈퇴
			if	( "WITHDRAW".equals( certVO.getAddVar() ) )	{
				phoneNo		= (String)request.getSession().getAttribute("HP_NO");
				if (phoneNo == null) {
					phoneNo = "";
		        }else {
		        	phoneNo = phoneNo.replace("-", "");
		        }
				userName		= (String)request.getSession().getAttribute("F_NAME");
				if (userName == null) {
					userName = "";
				}

				if	( phoneNo.equals( certVO.getCellNo() ) && userName.equals( certVO.getName() ) )	{
					sCheckType	= "WITHDRAW";
				}
				else	{
					sMsg	= "등록된 정보와 일치하지 않습니다.!!\\n정확한 정보를 입력하시기 바랍니다.";
				}
			}
			else	{
				sCheckType	= "JOIN";
			}
		}
		model.addAttribute("sMsg",sMsg);
		model.addAttribute("sCheckType",sCheckType);
		model.addAttribute("certVO",certVO);
		
		return "gzonei/member/pccRecieveSeed";
	}
	/**
	 * 회원가입 페이지
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/joinForm.do")
	public String joinForm(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		List<?> indvdlMberCode = cmmnService.selectCodeList("CMMN","CM00210000");//개인회원코드
		model.addAttribute("indvdlMberCode",indvdlMberCode);
		
		return "gzonei/member/joinForm";
	}
	
	/**
	 * 회원목록 조회
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/memberList.do")
	public String selectMemberList(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		EgovMap searchVO = new EgovMap();
		if(null != request.getParameter("codeIdNm") && !"".equals(request.getParameter("codeIdNm"))) {
			searchVO.put("codeIdNm", request.getParameter("codeIdNm"));
		}else {
			searchVO.put("codeIdNm", "");
		}
		
		PaginationInfo paginationInfo = new PaginationInfo();
		BoardVO boardVO = new BoardVO();
		if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
		paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
		paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
		paginationInfo.setPageSize(boardVO.getPageSize());
		
		searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
		searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
		searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());

		
		
		List<?> resultList = memberService.selectMemberList(searchVO);
		int totCnt = memberService.selectMemberListTotCnt(searchVO);
		
		paginationInfo.setTotalRecordCount(totCnt);
		
		model.addAttribute("searchVO",searchVO);
		model.addAttribute("resultList",resultList);
		model.addAttribute("paginationInfo", paginationInfo);
		
		return "gzonei/admin/member/memberList";
	}
	
	/**
	 * 회원정보 상세보기
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/memberView.do")
	public String selectMemberDetail(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		EgovMap searchVO = new EgovMap();

		searchVO.put("emplyrId", request.getParameter("emplyrId"));
		List<?> mberGradCode = cmmnService.selectCodeList("CMMN","CM00200000");//회원등급코드
		
		EgovMap resultVO = memberService.selectMemberDetail(searchVO);
		
		model.addAttribute("mberGradCode",mberGradCode);
		model.addAttribute("resultVO",resultVO);
		
		return "gzonei/admin/member/memberView";
	}
	
	/**
	 *  회원목록 엑셀다운로드
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@ResponseBody
	@RequestMapping(value="/admin/member/selectMemberListExcel.do", produces = "application/json; charset=utf8")
	public String selectMemberListExcel(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		Gson gson = new Gson();
		EgovMap searchVO = new EgovMap();
		if(null != request.getParameter("codeIdNm") && !"".equals(request.getParameter("codeIdNm"))) {
			searchVO.put("codeIdNm", request.getParameter("codeIdNm"));
		}else {
			searchVO.put("codeIdNm", "");
		}
		
		List<?> resultList = memberService.selectMemberListExcel(searchVO);
		
		String json = gson.toJson(resultList);
		
		return json;	

	}
	/**
	 * 회원 승인상태로 변경하기
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/memberConfirm.do")
	public void updateMemberState(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{

		Map<String, Object> resultMap = new HashMap<>();
		Gson gson = new Gson();
		String resultList = "";
		EgovMap searchVO = new EgovMap();
		
		searchVO.put("emplyrId", request.getParameter("emplyrId"));
		
		int resultCnt = memberService.updateMemberState(searchVO);
		resultMap.put("result", resultCnt);
		resultList = gson.toJson(resultMap);
		
		response.setContentType("text/html; charset=UTF-8");
		response.setCharacterEncoding("utf-8");
		response.getWriter().write(resultList);		
		
	}
	
	/**
	 * 결제내역, 조회이력 조회
	 * @param request
	 * @param response
	 * @param model
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/infoList.do")
	public void selectInfoList(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		Map<String, Object> resultMap = new HashMap<>();
		Gson gson = new Gson();
		String resultList = "";
		EgovMap searchVO = new EgovMap();
		
		searchVO.put("userId", request.getParameter("userId"));
		String type = request.getParameter("type");
		
		List<?> result = new ArrayList<>();
		if("payment".equals(type)) {
			result = memberService.selectPaymentList(searchVO);
			resultMap.put("paymentList", result);
		}else if("chkInfo".equals(type)) {
			result = memberService.selectChkInfoList(searchVO);
			resultMap.put("chkInfoList", result);
		}
		
		resultList = gson.toJson(resultMap);
		
		response.setContentType("text/html; charset=UTF-8");
		response.setCharacterEncoding("utf-8");
		response.getWriter().write(resultList);		
	}
	
	/**
	 * 회원등록 페이지
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/memberReg.do")
	public String adminMemberReg(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		List<?> indvdlMberCode = cmmnService.selectCodeList("CMMN","CM00210000");//개인회원코드
		model.addAttribute("indvdlMberCode",indvdlMberCode);
		
		return "gzonei/admin/member/memberReg";
	}
	
	@RequestMapping(value="/admin/member/memberIdChk.do")
	public void adminMemberIdChk(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{

		Map<String, Object> resultMap = new HashMap<>();
		Gson gson = new Gson();
		String resultList = "";
		EgovMap searchVO = new EgovMap();
		
		searchVO.put("checkId", request.getParameter("checkId"));
		
		int resultCnt = memberService.selectMemberIdChk(searchVO);
		resultMap.put("result", resultCnt);
		resultList = gson.toJson(resultMap);
		
		response.setContentType("text/html; charset=UTF-8");
		response.setCharacterEncoding("utf-8");
		response.getWriter().write(resultList);		
		
	}
	/** AJAX 호출시
	@RequestMapping(value="/admin/member/memberActionReg.do")
	public void adminMemberActionReg(@RequestParam Map<String, Object> commandMap, HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		Map<String, Object> resultMap = new HashMap<>();
		Gson gson = new Gson();
		String resultList = "";
		
		commandMap.put("mberSecsnAt", "N");// 회원탈퇴여부

	     // 사업자회원일 경우 
	    if ("2".equals(commandMap.get("indvdlMberCode"))) {
	        commandMap.put("mberSttusCode", "1");	// 회원상태(승인요청)
	    }
	     // 개인 또는 관리자회원일 경우
	    else {
	    	commandMap.put("mberSttusCode", "2");	// 회원상태(승인)
	    }
	     
//	    HttpSession session = request.getSession();
//	    commandMap.put("frstRegisterId", (String) session.getAttribute("USER_ID"));
	    commandMap.put("frstRegisterId", "test");
	     
	    int resultCnt = memberService.insertMemberInfo(commandMap);
	    resultMap.put("result", resultCnt);
		resultList = gson.toJson(resultMap);
		
		response.setContentType("text/html; charset=UTF-8");
		response.setCharacterEncoding("utf-8");
		response.getWriter().write(resultList);	
	}
	*/
	/**
	 * 회원 등록 처리
	 * @param commandMap
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/memberActionReg.do")
	public String adminMemberActionReg(@RequestParam Map<String, Object> commandMap, HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		commandMap.put("mberSecsnAt", "N");// 회원탈퇴여부
		
		// 사업자회원일 경우 
		if ("CM00210002".equals(commandMap.get("indvdlMberCode"))) {
			commandMap.put("mberSttusCode", "CM00220001");	// 회원상태(승인요청)
		}
		// 개인 또는 관리자회원일 경우
		else {
			commandMap.put("mberSttusCode", "CM00220002");	// 회원상태(승인)
		}
		
		EgovMap loginVO = (EgovMap) request.getSession().getAttribute("loginVO");
		commandMap.put("frstRegisterId", loginVO.get("id"));
		
		memberService.insertMemberInfo(commandMap);
		
		return "redirect:/admin/member/memberList.do";
	}
	
	/** 회원 수정 처리
	 * @param commandMap
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/memberActionUdt.do")
	public String adminMemberActionUdt(@RequestParam Map<String, Object> commandMap, HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		EgovMap loginVO = (EgovMap) request.getSession().getAttribute("loginVO");
		commandMap.put("lastUpdusrId", loginVO.get("id"));
		EgovMap searchVO = new EgovMap();
		
		searchVO.put("emplyrId", request.getParameter("emplyrId"));
		EgovMap resultVO = memberService.selectMemberDetail(searchVO);
		if(!commandMap.get("setleMemo").equals(resultVO.get("setleMemo"))) {
			commandMap.put("setleMemoDt", "Y");
		}
		if(!commandMap.get("edcMemo").equals(resultVO.get("edcMemo"))) {
			commandMap.put("edcMemoDt", "Y");
		}
		if(!commandMap.get("etcMemo").equals(resultVO.get("etcMemo"))) {
			commandMap.put("etcMemoDt", "Y");
		}
		System.out.println("commandMap => " + commandMap);
		memberService.adminMemberActionUdt(commandMap);
		
		return "redirect:/admin/member/memberList.do";
	}
	
	/** 다현 */
	
	/**
	 * 
	 * 접속이력목록 조회
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	
	@RequestMapping(value="/admin/member/connectList.do")
	public String selectConnectList(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		EgovMap searchVO = new EgovMap();
		if(null != request.getParameter("userId") && !"".equals(request.getParameter("userId"))) {
			searchVO.put("userId", request.getParameter("userId"));
		}else {
			searchVO.put("userId", "");
		}
	    PaginationInfo paginationInfo = new PaginationInfo();
        BoardVO boardVO = new BoardVO();
        if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
        paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
        paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
        paginationInfo.setPageSize(boardVO.getPageSize());
      
        searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
        searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
        searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());

		List<?> resultList = memberService.selectConnectList(searchVO);
		int totCnt = memberService.selectConnectListTotCnt(searchVO);
		paginationInfo.setTotalRecordCount(totCnt);
		
		model.addAttribute("searchVO",searchVO);
		model.addAttribute("resultList",resultList);
		model.addAttribute("totCnt",totCnt);
		model.addAttribute("paginationInfo",paginationInfo);
		return "gzonei/admin/member/connectList";
		
	}
	
	
	/**
	 * 
	 * 사용자접속이력조회
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@ResponseBody
	@RequestMapping(value="/admin/member/userConnectList.do",produces="application/json;charset=UTF-8")
	public String selectUserConnectHist(HttpServletRequest request, HttpServletResponse response) throws SQLException, IOException{
		String userId = request.getParameter("userId");
		EgovMap searchVO = new EgovMap();
		searchVO.put("userId", userId);
		
		List<?> resultList = memberService.selectUserConnectHist(searchVO);
	    
		Gson gson = new Gson();
		String json = gson.toJson(resultList);
		
		return json;
	}
	
	/**
	 * 
	 * 패널티목록조회 
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/penaltyList.do")
	public String selectPenaltyList(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		EgovMap searchVO = new EgovMap();
		if(null != request.getParameter("userId") && !"".equals(request.getParameter("userId"))) {
			searchVO.put("userId", request.getParameter("userId"));
		}else {
			searchVO.put("userId", "");
		}
	    PaginationInfo paginationInfo = new PaginationInfo();
        BoardVO boardVO = new BoardVO();
        if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
        paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
        paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
        paginationInfo.setPageSize(boardVO.getPageSize());
      
        searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
        searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
        searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());

		List<?> resultList = memberService.selectPenaltyList(searchVO);
		int totCnt = memberService.selectPenaltyListTotCnt(searchVO);
		paginationInfo.setTotalRecordCount(totCnt);
		
		model.addAttribute("searchVO",searchVO);
		model.addAttribute("resultList",resultList);
		model.addAttribute("totCnt",totCnt);
		model.addAttribute("paginationInfo",paginationInfo);
		return "gzonei/admin/member/penaltyList";
		
	}
	
	/**
	 * 
	 * 사용자 패널티 해제
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/penaltyRelease.do")
	public void updatePenaltyRelease(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{

		Map<String, Object> resultMap = new HashMap<>();
		Gson gson = new Gson();
		String resultList = "";
		EgovMap searchVO = new EgovMap();
		
		EgovMap loginVO = (EgovMap) request.getSession().getAttribute("loginVO");
		searchVO.put("lastUpdusrId", loginVO.get("id"));
		searchVO.put("userId", request.getParameter("userId"));
		
		int resultCnt = memberService.updatePenaltyRelease(searchVO);
		resultMap.put("result", resultCnt);
		resultList = gson.toJson(resultMap);
		
		response.setContentType("text/html; charset=UTF-8");
		response.setCharacterEncoding("utf-8");
		response.getWriter().write(resultList);		
		
	}
	
	/**
	 * 
	 * 패널티목록 회원상세정보 조회 팝업창 
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/memberDetailPopup.do")
	public void selectMemberDetailView(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		
		Gson gson = new Gson();
		String result = "";
		EgovMap searchVO = new EgovMap();
		
		
		searchVO.put("emplyrId", request.getParameter("emplyrId"));
		EgovMap resultVO = memberService.selectMemberDetail(searchVO);
		
	    result = gson.toJson(resultVO);
		
		response.setContentType("text/html; charset=UTF-8");
		response.setCharacterEncoding("utf-8");
		response.getWriter().write(result);		
	}
	
	/**
	 * 
	 * 회원탈퇴신청 목록 조회
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/secessionList.do")
	public String selectSecessionList(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{
		
		EgovMap searchVO = new EgovMap();
		if(null != request.getParameter("userId") && !"".equals(request.getParameter("userId"))) {
			searchVO.put("userId", request.getParameter("userId"));
		}else {
			searchVO.put("userId", "");
		}
	    PaginationInfo paginationInfo = new PaginationInfo();
        BoardVO boardVO = new BoardVO();
        if(null != request.getParameter("pageIndex") && !"".equals(request.getParameter("pageIndex"))) {
			boardVO.setPageIndex(Integer.parseInt(request.getParameter("pageIndex")));
		}
        paginationInfo.setCurrentPageNo(boardVO.getPageIndex());
        paginationInfo.setRecordCountPerPage(boardVO.getPageUnit());
        paginationInfo.setPageSize(boardVO.getPageSize());
      
        searchVO.put("firstIndex",paginationInfo.getFirstRecordIndex());
        searchVO.put("lastIndex",paginationInfo.getLastRecordIndex());
        searchVO.put("recordCountPerPage",paginationInfo.getRecordCountPerPage());

		List<?> resultList = memberService.selecSecessionList(searchVO);
		int totCnt = memberService.selectSecessionListTotCnt(searchVO);
		int secsnWaitCnt = memberService.selectSecsnWaitCnt(searchVO);
		
		paginationInfo.setTotalRecordCount(totCnt);
		
		model.addAttribute("searchVO",searchVO);
		model.addAttribute("resultList",resultList);
		model.addAttribute("totCnt",totCnt);
		model.addAttribute("paginationInfo",paginationInfo);
		model.addAttribute("secsnWaitCnt",secsnWaitCnt);
		
		return "gzonei/admin/member/secessionList";
		
	}
	
	/**
	 * 
	 * 탈퇴 승인
	 * 
	 * @param request
	 * @param response
	 * @param model
	 * @throws SQLException
	 * @throws IOException
	 */
	@RequestMapping(value="/admin/member/secessionConfirm.do")
	public void updateSecessionConfirm(HttpServletRequest request, HttpServletResponse response, Model model) throws SQLException , IOException{

		Map<String, Object> resultMap = new HashMap<>();
		Gson gson = new Gson();
		String resultList = "";
		EgovMap searchVO = new EgovMap();
		
		searchVO.put("userId", request.getParameter("userId"));
		
		EgovMap loginVO = (EgovMap) request.getSession().getAttribute("loginVO");
		searchVO.put("lastUpdusrId", loginVO.get("id"));
		
		int resultCnt = memberService.updateSecessionConfirm(searchVO);
		
		resultMap.put("result", resultCnt);
		resultList = gson.toJson(resultMap);
		
		response.setContentType("text/html; charset=UTF-8");
		response.setCharacterEncoding("utf-8");
		response.getWriter().write(resultList);		
		
	}
	
	
	
	
	
	
}
