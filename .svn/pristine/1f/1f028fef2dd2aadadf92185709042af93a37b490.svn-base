<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Wed May 11 15:49:51 KST 2016-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gradAuthDAO">

 	<select id="selectGradAuthList" parameterType="EgovMap" resultType="EgovMap">
 			<![CDATA[
			SELECT GRAD_AUTHOR_SN
				, GRAD_AUTHOR_CODE
				, GRAD_AUTHOR_NM
				, GRAD_AUTHOR_DC
				, USE_AT
				, DEL_AT
				, FRST_REGISTER_ID
				, TO_CHAR(FRST_REGIST_PNTTM,'YYYY-MM-DD') AS FRST_REGIST_PNTTM
				, LAST_UPDUSR_ID
				, TO_CHAR(LAST_UPDT_PNTTM,'YYYY-MM-DD') AS LAST_UPDT_PNTTM
			FROM PUBLIC.GZ_GRAD_AUTHOR_MANAGE
			WHERE 1=1
 			]]>
			<if test="'' != gradAuthorNm">
			<![CDATA[
				AND GRAD_AUTHOR_NM LIKE CONCAT ('%', #{gradAuthorNm},'%') 	
			]]>
			</if>
			<![CDATA[
			LIMIT #{recordCountPerPage} OFFSET #{firstIndex}
			]]>
	</select>
	
	<select id="selectGradAuthListTotCnt" parameterType="EgovMap" resultType="int">
		<![CDATA[
			SELECT COUNT(*)
			FROM PUBLIC.GZ_GRAD_AUTHOR_MANAGE
			WHERE 1=1
 			]]>
			<if test="'' != gradAuthorNm">
			<![CDATA[
				AND GRAD_AUTHOR_NM LIKE CONCAT ('%', #{gradAuthorNm},'%') 	
			]]>
			</if>
	</select>
	
	<select id="selectGradAuthInfo" parameterType="EgovMap" resultType="EgovMap">
 			<![CDATA[
			SELECT GRAD_AUTHOR_SN
				, GRAD_AUTHOR_CODE
				, GRAD_AUTHOR_NM
				, GRAD_AUTHOR_DC
				, USE_AT
				, DEL_AT
				, FRST_REGISTER_ID
				, TO_CHAR(FRST_REGIST_PNTTM,'YYYY-MM-DD') AS FRST_REGIST_PNTTM
				, LAST_UPDUSR_ID
				, TO_CHAR(LAST_UPDT_PNTTM,'YYYY-MM-DD') AS LAST_UPDT_PNTTM
			FROM PUBLIC.GZ_GRAD_AUTHOR_MANAGE
			WHERE GRAD_AUTHOR_SN = #{gradAuthorSn}::UUID
 			]]>
	</select>
	
	<select id="selectGradAuthAmountInfo" parameterType="EgovMap" resultType="EgovMap">
 			<![CDATA[
			SELECT GRAD_AMOUNT_SN
				, GRAD_AUTHOR_SN
				, GOODS_NM
				, USE_MONTH_CO
				, USE_MONTH_CO_CODE
				, AMOUNT
				, SRVC_SE_CODE
				, USE_AT
				, DEL_AT
				, FRST_REGISTER_ID
				, TO_CHAR(FRST_REGIST_PNTTM,'YYYY-MM-DD') AS FRST_REGIST_PNTTM
				, LAST_UPDUSR_ID
				, TO_CHAR(LAST_UPDT_PNTTM,'YYYY-MM-DD') AS LAST_UPDT_PNTTM
			FROM PUBLIC.GZ_GRAD_AMOUNT_MANAGE
			WHERE GRAD_AUTHOR_SN = #{gradAuthorSn}::UUID
 			]]>
	</select>
	
	<select id="selectGradAuthDetailInfo" parameterType="EgovMap" resultType="EgovMap">
 			<![CDATA[
			SELECT GRAD_AUTHOR_DETAIL_SN
				, GRAD_AUTHOR_SN
				, AUTHOR_NM
				, AUTHOR_DC
				, AUTHOR_CODE
				, MENU_ACCES_AT
				, INFO_INQIRE_AT
				, INFO_REGIST_AT
				, INFO_UPDT_AT
				, INFO_DEL_AT
				, INFO_DSPY_AT
				, EXECUT_AT
				, FRST_REGISTER_ID
				, TO_CHAR(FRST_REGIST_PNTTM,'YYYY-MM-DD') AS FRST_REGIST_PNTTM
				, LAST_UPDUSR_ID
				, TO_CHAR(LAST_UPDT_PNTTM,'YYYY-MM-DD') AS LAST_UPDT_PNTTM
			FROM PUBLIC.GZ_GRAD_AUTHOR_MANAGE_DETAIL
			WHERE GRAD_AUTHOR_SN = #{gradAuthorSn}::UUID
 			]]>
	</select>
	
	<insert id="insertGradAuthInfo">
	
	<selectKey resultType="string" keyProperty="gradAuthorSn" order="AFTER">
	<![CDATA[
    	SELECT GRAD_AUTHOR_SN 
    	FROM PUBLIC.GZ_GRAD_AUTHOR_MANAGE 
    	WHERE GRAD_AUTHOR_NM = #{gradAuthorNm}
    ]]>
    	<if test ="'' != gradAuthorCode">
    <![CDATA[
    	AND GRAD_AUTHOR_CODE = #{gradAuthorCode}
    ]]>
    	</if>
    <![CDATA[
    	AND GRAD_AUTHOR_DC = #{gradAuthorDc} 
    	AND USE_AT = #{useAt}
    	AND DEL_AT = #{delAt}
    ]]>
	</selectKey>
	
	<![CDATA[
	INSERT INTO PUBLIC.GZ_GRAD_AUTHOR_MANAGE
	( 
		GRAD_AUTHOR_SN
		, GRAD_AUTHOR_CODE
		, GRAD_AUTHOR_NM
		, GRAD_AUTHOR_DC
		, USE_AT
		, DEL_AT
		, FRST_REGISTER_ID
		, FRST_REGIST_PNTTM
		, LAST_UPDUSR_ID
		, LAST_UPDT_PNTTM
	)
	VALUES (
	]]>
		<choose>
			<when test="'' == gradAuthorSn or null == gradAuthorSn">
			<![CDATA[
			UUID_GENERATE_V4()
			]]>
			</when>
			<otherwise>
			<![CDATA[
			#{gradAuthorSn}::UUID
			]]>
			</otherwise>
		</choose>
		<choose>
			<when test="'' == gradAuthorCode or null == gradAuthorCode">
			<![CDATA[
			,(SELECT 'CM0020' || (SELECT LPAD(CASE WHEN MAX(SUBSTR(GRAD_AUTHOR_CODE ,7,10)::NUMERIC+1)::VARCHAR IS NULL THEN '1' ELSE MAX(SUBSTR(GRAD_AUTHOR_CODE,7,10)::NUMERIC+1)::VARCHAR END , 4 , '0' ) FROM PUBLIC.GZ_GRAD_AUTHOR_MANAGE))
			]]>
			</when>
			<otherwise>
			<![CDATA[
			,#{gradAuthorCode}
			]]>
			</otherwise>
		</choose>
	<![CDATA[
		, #{gradAuthorNm}
		, #{gradAuthorDc}
		, #{useAt}
		, #{delAt}
		, #{userId}
		, NOW()
		, #{userId}
		, NOW()
	)
	ON CONFLICT(GRAD_AUTHOR_SN)
	DO UPDATE SET
		 GRAD_AUTHOR_NM = EXCLUDED.GRAD_AUTHOR_NM
		, GRAD_AUTHOR_DC = EXCLUDED.GRAD_AUTHOR_DC
		, USE_AT = EXCLUDED.USE_AT
		, DEL_AT = EXCLUDED.DEL_AT
		, LAST_UPDUSR_ID = EXCLUDED.LAST_UPDUSR_ID
		, LAST_UPDT_PNTTM = NOW()
	]]>
	</insert>

	<insert id="insertGradAmountInfo">
	INSERT INTO PUBLIC.GZ_GRAD_AMOUNT_MANAGE
	( 
		GRAD_AMOUNT_SN
		, GRAD_AUTHOR_SN
		, GOODS_NM
		, USE_MONTH_CO
		, USE_MONTH_CO_CODE
		, AMOUNT
		, SRVC_SE_CODE
		, USE_AT
		, DEL_AT
		, FRST_REGISTER_ID
		, FRST_REGIST_PNTTM
		, LAST_UPDUSR_ID
		, LAST_UPDT_PNTTM
	)
	VALUES (
		<choose>
			<when test="'' == gradAmountSn or null == gradAmountSn">
			<![CDATA[
			UUID_GENERATE_V4()
			]]>
			</when>
			<otherwise>
			<![CDATA[
			#{gradAmountSn}::UUID
			]]>
			</otherwise>
		</choose>
		, #{gradAuthorSn}::UUID
		, (#{goodsNm} || ' (' || (SELECT CODE_ID_NM FROM PUBLIC.GZ_CMMN_CODE WHERE CODE_ID = #{useMonthCoCode}) || ')' )
		, (SELECT REPLACE(CODE_ID_NM,'개월','') FROM PUBLIC.GZ_CMMN_CODE WHERE CODE_ID = #{useMonthCoCode})
		, #{useMonthCoCode}
		, #{amount}
		, #{srvcSeCode}
		, #{useAt}
		, 'N'
		, #{userId}
		, NOW()
		, #{userId}
		, NOW()
	)
	ON CONFLICT(GRAD_AMOUNT_SN)
	DO UPDATE SET
		 GOODS_NM = EXCLUDED.GOODS_NM
		 , USE_MONTH_CO = EXCLUDED.USE_MONTH_CO
		 , USE_MONTH_CO_CODE = EXCLUDED.USE_MONTH_CO_CODE
		 , AMOUNT = EXCLUDED.AMOUNT
		 , SRVC_SE_CODE = EXCLUDED.SRVC_SE_CODE
		 , USE_AT = EXCLUDED.USE_AT
		 , LAST_UPDUSR_ID = EXCLUDED.LAST_UPDUSR_ID
		 , LAST_UPDT_PNTTM = NOW()
	</insert>

	<insert id="insertGradAuthDetailInfo">
	INSERT INTO PUBLIC.GZ_GRAD_AUTHOR_MANAGE_DETAIL
	( 
		GRAD_AUTHOR_DETAIL_SN
		, GRAD_AUTHOR_SN
		, AUTHOR_NM
		, AUTHOR_DC
		, AUTHOR_CODE
		, MENU_ACCES_AT
		, INFO_INQIRE_AT
		, INFO_REGIST_AT
		, INFO_UPDT_AT
		, INFO_DEL_AT
		, INFO_DSPY_AT
		, EXECUT_AT
		, FRST_REGISTER_ID
		, FRST_REGIST_PNTTM
		, LAST_UPDUSR_ID
		, LAST_UPDT_PNTTM
	)
	VALUES (
		<choose>
			<when test="'' == gradAuthorDetailSn or null == gradAuthorDetailSn">
			<![CDATA[
			UUID_GENERATE_V4()
			]]>
			</when>
			<otherwise>
			<![CDATA[
			#{gradAuthorDetailSn}::UUID
			]]>
			</otherwise>
		</choose>
		, #{gradAuthorSn}::UUID
		, #{authorNm}
		, #{authorDc}
		, #{authorCode}
		, #{menuAccesAt}
		, #{infoInqireAt}
		, #{infoRegistAt}
		, #{infoUpdtAt}
		, #{infoDelAt}
		, #{infoDspyAt}
		, #{executAt}
		, #{userId}
		, NOW()
		, #{userId}
		, NOW()
	)
	ON CONFLICT(GRAD_AUTHOR_DETAIL_SN)
	DO UPDATE SET
		 AUTHOR_NM = EXCLUDED.AUTHOR_NM
		 , AUTHOR_DC = EXCLUDED.AUTHOR_DC
		 , AUTHOR_CODE = EXCLUDED.AUTHOR_CODE
		 , MENU_ACCES_AT = EXCLUDED.MENU_ACCES_AT
		 , INFO_INQIRE_AT = EXCLUDED.INFO_INQIRE_AT
		 , INFO_REGIST_AT = EXCLUDED.INFO_REGIST_AT
		 , INFO_UPDT_AT = EXCLUDED.INFO_UPDT_AT
		 , INFO_DEL_AT = EXCLUDED.INFO_DEL_AT
		 , INFO_DSPY_AT = EXCLUDED.INFO_DSPY_AT
		 , EXECUT_AT = EXCLUDED.EXECUT_AT
		 , LAST_UPDUSR_ID = EXCLUDED.LAST_UPDUSR_ID
		 , LAST_UPDT_PNTTM = NOW()
	</insert>
	
</mapper>